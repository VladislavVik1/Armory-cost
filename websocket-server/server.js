const fs = require("fs");
const https = require("https");
const WebSocket = require("ws");

// **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞**
const FILE_PATH = "orders.json";
const SSL_CERT_PATH = "/etc/letsencrypt/live/pmk-eagles.shop/fullchain.pem";
const SSL_KEY_PATH = "/etc/letsencrypt/live/pmk-eagles.shop/privkey.pem";
const PORT = 8080;

// **–°–æ–∑–¥–∞—ë–º HTTPS —Å–µ—Ä–≤–µ—Ä**
const server = https.createServer({
    cert: fs.readFileSync(SSL_CERT_PATH),
    key: fs.readFileSync(SSL_KEY_PATH),
});

// **–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤**
function loadOrders() {
    try {
        if (!fs.existsSync(FILE_PATH)) {
            fs.writeFileSync(FILE_PATH, "[]");
            return [];
        }

        let data = fs.readFileSync(FILE_PATH, "utf8").trim();
        return data ? JSON.parse(data) : [];
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ orders.json:", err);
        return [];
    }
}

// **–§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤**
function saveOrders(newOrders) {
    try {
        fs.writeFileSync(FILE_PATH, JSON.stringify(newOrders, null, 2));
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è orders.json:", err);
    }
}

// **–§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤**
function clearOrdersOnServer() {
    console.log("üóë –û—á–∏—Å—Ç–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...");
    try {
        fs.writeFileSync(FILE_PATH, "[]", { encoding: "utf8", flag: "w" });
        orders = [];
        console.log("‚úÖ –í—Å–µ –∑–∞–∫–∞–∑—ã –æ—á–∏—â–µ–Ω—ã!");

        // üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–∫–∞–∑—ã —É–¥–∞–ª–µ–Ω—ã
        broadcastMessage({ type: "orders_cleared" });
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ orders.json:", err);
    }
}

// **–ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞**
let orders = loadOrders();

// **–°–æ–∑–¥–∞—ë–º WebSocket —Å–µ—Ä–≤–µ—Ä**
const wss = new WebSocket.Server({ server });

wss.on("connection", (ws) => {
    console.log("üîó –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è!");

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã
    ws.send(JSON.stringify({ type: "init", orders }));

    ws.on("message", (message) => {
        try {
            let data = JSON.parse(message);
            console.log("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:", JSON.stringify(data, null, 2));

            if (data.type === "new_order") {
                console.log("üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:", JSON.stringify(data.order, null, 2));

                let totalSum = 0;
                data.order.items.forEach((item) => {
                    let itemTotal = item.totalPrice || 0;
                    totalSum += itemTotal;
                });

                data.order.total = totalSum.toFixed(2);
                orders.push(data.order);
                saveOrders(orders);

                console.log("‚úÖ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞:", data.order.total);

                // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
                ws.send(JSON.stringify({ type: "order_received", total: data.order.total }));

                // üì¢ –†–∞—Å—Å—ã–ª–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
                broadcastOrders();
            }

            if (data.type === "clear_orders") {
                console.log("üóë –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—á–∏—Å—Ç–∫—É –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—É—á–µ–Ω!");
                clearOrdersOnServer();
            }

        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
        }
    });

    // **–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ WebSocket**
    ws.on("error", (err) => {
        console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ WebSocket:", err);
    });
});

// **–§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤**
function broadcastOrders() {
    let message = JSON.stringify({ type: "init", orders });
    wss.clients.forEach((client) => {
        if (client.readyState === WebSocket.OPEN) {
            client.send(message);
        }
    });
}

// **–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º**
function broadcastMessage(message) {
    wss.clients.forEach((client) => {
        if (client.readyState === WebSocket.OPEN) {
            client.send(JSON.stringify(message));
        }
    });
}

// **–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞**
server.listen(PORT, () => {
    console.log(`‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ wss://pmk-eagles.shop:${PORT}`);
});
