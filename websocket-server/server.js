const fs = require("fs");
const https = require("https");
const WebSocket = require("ws");

// **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞**
const FILE_PATH = "orders.json";
const SSL_CERT_PATH = "/etc/letsencrypt/live/pmk-eagles.shop/fullchain.pem";
const SSL_KEY_PATH = "/etc/letsencrypt/live/pmk-eagles.shop/privkey.pem";
const PORT = 8080;

// **–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤**
if (!fs.existsSync(SSL_CERT_PATH) || !fs.existsSync(SSL_KEY_PATH)) {
    console.error("‚ùå –û—à–∏–±–∫–∞: SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
    process.exit(1);
}

// **–°–æ–∑–¥–∞—ë–º HTTPS —Å–µ—Ä–≤–µ—Ä**
const server = https.createServer({
    cert: fs.readFileSync(SSL_CERT_PATH),
    key: fs.readFileSync(SSL_KEY_PATH),
});

// **–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ JSON-—Ñ–∞–π–ª–∞**
function loadOrders() {
    if (fs.existsSync(FILE_PATH)) {
        try {
            return JSON.parse(fs.readFileSync(FILE_PATH, "utf8"));
        } catch (err) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ orders.json:", err);
            return [];
        }
    }
    return [];
}

// **–§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –≤ JSON-—Ñ–∞–π–ª**
function saveOrders(newOrders) {
    try {
        fs.writeFileSync(FILE_PATH, JSON.stringify(newOrders, null, 2));
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è orders.json:", err);
    }
}

// **–ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞**
let orders = loadOrders();

// **–°–æ–∑–¥–∞—ë–º WebSocket —Å–µ—Ä–≤–µ—Ä (—á–µ—Ä–µ–∑ HTTPS)**
const wss = new WebSocket.Server({ server });

wss.on("connection", (ws) => {
    console.log("üîó –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è!");

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã
    ws.send(JSON.stringify({ type: "init", orders }));

    ws.on("message", (message) => {
        try {
            let data = JSON.parse(message);
            console.log("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:", JSON.stringify(data, null, 2));

            if (data.type === "new_order") {
                console.log("üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω:", JSON.stringify(data.order, null, 2));

                let totalSum = data.order.items.reduce((sum, item) => sum + parseFloat(item.totalPrice || 0), 0);
                data.order.total = totalSum.toFixed(2);

                orders.push(data.order);
                saveOrders(orders);

                console.log("‚úÖ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞):", data.order.total);
                broadcastOrders();
            } else if (data.type === "clear_orders") {
                console.log("üóë –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤!");

                orders = [];
                saveOrders(orders);

                broadcastOrders();
            }
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
        }
    });
});

function broadcastOrders() {
    let message = JSON.stringify({ type: "init", orders });
    wss.clients.forEach((client) => {
        if (client.readyState === WebSocket.OPEN) {
            client.send(message);
        }
    });
}

// **–ó–∞–ø—É—Å–∫ HTTPS WebSocket —Å–µ—Ä–≤–µ—Ä–∞**
server.listen(PORT, () => {
    console.log(`‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ wss://pmk-eagles.shop:${PORT}`);
});
