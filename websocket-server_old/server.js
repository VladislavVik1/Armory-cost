const fs = require("fs").promises;
const https = require("https");
const WebSocket = require("ws");

// üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = 8080;
const CERT_PATH = "/etc/letsencrypt/live/pmk-eagles.shop/fullchain.pem";
const KEY_PATH = "/etc/letsencrypt/live/pmk-eagles.shop/privkey.pem";
const FILE_PATH = "/home/dakraman1232/websocket-server_old/orders.json";

// üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
if (!fs.existsSync(CERT_PATH) || !fs.existsSync(KEY_PATH)) {
  console.error("‚ùå –û—à–∏–±–∫–∞: SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
  process.exit(1);
}

// üîπ –°–æ–∑–¥–∞—ë–º HTTPS-—Å–µ—Ä–≤–µ—Ä
const server = https.createServer({
  cert: fs.readFileSync(CERT_PATH),
  key: fs.readFileSync(KEY_PATH),
});

// üîπ –°–æ–∑–¥–∞—ë–º WebSocket-—Å–µ—Ä–≤–µ—Ä
const wss = new WebSocket.Server({ server });

// üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ —Ñ–∞–π–ª–∞ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
app.post("/get-orders", (req, res) => {
    let newOrder = req.body;
    console.log("üì© –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑:", newOrder);

    if (!newOrder || !newOrder.order || !Array.isArray(newOrder.order.items)) {
        return res.status(400).json({ success: false, message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" });
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã
    let orders = [];
    if (fs.existsSync(ORDERS_PATH)) {
        orders = JSON.parse(fs.readFileSync(ORDERS_PATH, "utf8")) || [];
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
    orders.push(newOrder.order);
    fs.writeFileSync(ORDERS_PATH, JSON.stringify(orders, null, 2), "utf8");

    console.log("‚úÖ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!");
    res.json({ success: true, message: "–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!" });
});


// üîπ –§—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
function safeJSONParse(data) {
  try {
    return JSON.parse(data);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", error.message);
    return null;
  }
}

// üîπ –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –≤ —Ñ–∞–π–ª
// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –≤ —Ñ–∞–π–ª
function saveOrdersToFile(orders) {
    console.log("üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ñ–∞–π–ª:", orders);

    fs.readFile(FILE_PATH, "utf8", (err, data) => {
        let existingOrders = [];

        if (!err && data) {
            try {
                existingOrders = JSON.parse(data);
                if (!Array.isArray(existingOrders)) {
                    existingOrders = [];
                }
            } catch (parseError) {
                console.error("‚ö† –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ orders.json, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª:", parseError);
                existingOrders = [];
            }
        } else if (err && err.code !== "ENOENT") {
            console.error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ orders.json:", err);
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
        existingOrders.push(...orders);

        console.log("üì¶ –ò—Ç–æ–≥–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∑–∞–∫–∞–∑–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é:", JSON.stringify(existingOrders, null, 2));

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
        fs.writeFile(FILE_PATH, JSON.stringify(existingOrders, null, 2), "utf8", (writeErr) => {
            if (writeErr) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ orders.json:", writeErr);
            } else {
                console.log("‚úÖ –ó–∞–∫–∞–∑—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ orders.json.");
            }
        });
    });
}




// üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
async function processClientMessage(ws, message) {
  try {
    if (!message || typeof message !== "string" || message.trim() === "") {
      console.warn("‚ö† –ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.");
      return;
    }

    console.log(`üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${message}"`);
    const parsedMessage = safeJSONParse(message);
    if (!parsedMessage || typeof parsedMessage !== "object") {
      ws.send(JSON.stringify({ type: "error", message: "Invalid JSON" }));
      return;
    }

    switch (parsedMessage.type) {
      case "new_order":
        if (!parsedMessage.order || typeof parsedMessage.order !== "object" || !Array.isArray(parsedMessage.order.items)) {
          ws.send(JSON.stringify({ type: "error", message: "Invalid order data" }));
          console.error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–∫–∞–∑!", parsedMessage);
          return;
        }

        console.log("üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω:", parsedMessage.order);

        // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –º–∞—Å—Å–∏–≤
        orders.push(parsedMessage.order);
        await saveOrdersToFile(orders); // ‚úÖ –¢–µ–ø–µ—Ä—å –∂–¥—ë–º, –ø–æ–∫–∞ –∑–∞–∫–∞–∑—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è

        // üîπ –û–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
        broadcastToClients({ type: "init", orders });
        break;

      case "get_orders":
    console.log("üìã –ó–∞–ø—Ä–æ—Å –∑–∞–∫–∞–∑–æ–≤ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞...");

    fs.readFile(FILE_PATH, "utf8", (err, data) => {
        if (err) {
            console.error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è orders.json:", err);
            ws.send(JSON.stringify({ type: "error", message: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤" }));
            return;
        }

        let loadedOrders = [];
        try {
            loadedOrders = JSON.parse(data);
            if (!Array.isArray(loadedOrders)) {
                loadedOrders = [];
            }
        } catch (parseError) {
            console.error("‚ö† –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ orders.json:", parseError);
        }

        console.log("üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç—É:", JSON.stringify(loadedOrders, null, 2));
        ws.send(JSON.stringify({ type: "init", orders: loadedOrders }));
    });
    break;


      case "clear_orders":
        console.log("üóë –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤...");
        orders = [];
        await saveOrdersToFile(orders);

        // üîπ –û–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–± –æ—á–∏—Å—Ç–∫–µ
        broadcastToClients({ type: "orders_cleared" });
        break;

      default:
        ws.send(JSON.stringify({ type: "error", message: "Unknown message type" }));
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error.message);
  }
}



// üîπ –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
function broadcastToClients(data) {
  wss.clients.forEach(client => {
    if (client.readyState === WebSocket.OPEN) {
      client.send(JSON.stringify(data));
    }
  });
}

// üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π WebSocket
wss.on("connection", (ws, req) => {
  console.log("üîó –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω!");

  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º Origin
  const origin = req.headers.origin || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";
  console.log(`üåê Origin –∫–ª–∏–µ–Ω—Ç–∞: ${origin}`);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã
  console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç—É:", orders);
ws.send(JSON.stringify({ type: "init", orders }));

  ws.on("message", (message) => processClientMessage(ws, message));
  ws.on("close", () => console.log("‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è."));
  ws.on("error", (error) => console.error("‚ùå –û—à–∏–±–∫–∞ WebSocket:", error));
});

// üîπ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.listen(PORT, () => {
  console.log(`‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ wss://pmk-eagles.shop:${PORT}`);
});
