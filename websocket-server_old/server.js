const fs = require("fs");
const fsp = fs.promises;
const https = require("https");
const express = require("express");
const WebSocket = require("ws");
const path = require("path");

// üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Ñ–∞–π–ª–æ–≤
const PORT = 8080;
const CERT_PATH = "/etc/letsencrypt/live/pmk-eagles.shop/fullchain.pem";
const KEY_PATH = "/etc/letsencrypt/live/pmk-eagles.shop/privkey.pem";
const FILE_PATH = "/home/dakraman1232/websocket-server_old/orders.json";

// üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
if (!fs.existsSync(CERT_PATH) || !fs.existsSync(KEY_PATH)) {
  console.error("‚ùå –û—à–∏–±–∫–∞: SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
  process.exit(1);
}

// üîπ –°–æ–∑–¥–∞—ë–º Express-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ JSON
const app = express();
app.use(express.json());

// üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞
async function ensureDirectoryExists(dir) {
  try {
    await fsp.mkdir(dir, { recursive: true });
    console.log(`‚úÖ –ö–∞—Ç–∞–ª–æ–≥ ${dir} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–Ω.`);
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ ${dir}:`, err);
  }
}

// üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ orders.json
async function ensureOrdersFileExists() {
  try {
    await fsp.access(FILE_PATH);
  } catch (err) {
    if (err.code === 'ENOENT') {
      await fsp.writeFile(FILE_PATH, "[]", "utf8");
      console.log("‚Ñπ –§–∞–π–ª –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª.");
    } else {
      console.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ orders.json:", err);
    }
  }
}

// üîπ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
let orders = [];

// üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
(async () => {
  const dirPath = path.dirname(FILE_PATH);
  await ensureDirectoryExists(dirPath);
  await ensureOrdersFileExists();

  try {
    const data = await fsp.readFile(FILE_PATH, "utf8");
    orders = JSON.parse(data);
    if (!Array.isArray(orders)) {
      orders = [];
    }
    console.log("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞–∫–∞–∑—ã –∏–∑ —Ñ–∞–π–ª–∞:", orders);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:", err);
    orders = [];
  }
})();

// üîπ HTTP‚Äë—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–∏—ë–º–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ (POST /get-orders)
app.post("/get-orders", async (req, res) => {
  const newOrder = req.body;
  console.log("üì© –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑:", newOrder);

  if (!newOrder || !newOrder.order || !Array.isArray(newOrder.order.items)) {
    return res.status(400).json({ success: false, message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" });
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
  orders.push(newOrder.order);

  try {
    await fsp.writeFile(FILE_PATH, JSON.stringify(orders, null, 2), "utf8");
    console.log("‚úÖ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!");
    res.json({ success: true, message: "–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!" });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ orders.json:", err);
    res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞" });
  }
});

// üîπ –°–æ–∑–¥–∞—ë–º HTTPS‚Äë—Å–µ—Ä–≤–µ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Express-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const server = https.createServer(
  {
    cert: fs.readFileSync(CERT_PATH),
    key: fs.readFileSync(KEY_PATH),
  },
  app
);

// üîπ –°–æ–∑–¥–∞—ë–º WebSocket‚Äë—Å–µ—Ä–≤–µ—Ä –Ω–∞ –±–∞–∑–µ HTTPS‚Äë—Å–µ—Ä–≤–µ—Ä–∞
const wss = new WebSocket.Server({ server });

// üîπ –§—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
function safeJSONParse(data) {
  try {
    return JSON.parse(data);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", error.message);
    return null;
  }
}

// üîπ –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –≤ —Ñ–∞–π–ª (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–µ—Å—å –º–∞—Å—Å–∏–≤)
async function saveOrdersToFile(ordersToSave) {
  console.log("üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ñ–∞–π–ª:", ordersToSave);
  try {
    await fsp.writeFile(FILE_PATH, JSON.stringify(ordersToSave, null, 2), "utf8");
    console.log("‚úÖ –ó–∞–∫–∞–∑—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ orders.json.");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ orders.json:", err);
  }
}

// üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ WebSocket
async function processClientMessage(ws, message) {
  try {
   
    console.log(`üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${message}"`);
    const parsedMessage = safeJSONParse(message);
    if (!parsedMessage || typeof parsedMessage !== "object") {
      ws.send(JSON.stringify({ type: "error", message: "Invalid JSON" }));
      return;
    }

    switch (parsedMessage.type) {
      case "new_order":
        if (
          !parsedMessage.order ||
          typeof parsedMessage.order !== "object" ||
          !Array.isArray(parsedMessage.order.items)
        ) {
          ws.send(JSON.stringify({ type: "error", message: "Invalid order data" }));
          console.error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–∫–∞–∑!", parsedMessage);
          return;
        }

        console.log("üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω:", parsedMessage.order);
        orders.push(parsedMessage.order);
        await saveOrdersToFile(orders);
        broadcastToClients({ type: "init", orders });
        break;

      case "get_orders":
        console.log("üìã –ó–∞–ø—Ä–æ—Å –∑–∞–∫–∞–∑–æ–≤ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞...");
        try {
          const data = await fsp.readFile(FILE_PATH, "utf8");
          let loadedOrders = JSON.parse(data);
          if (!Array.isArray(loadedOrders)) {
            loadedOrders = [];
          }
          console.log("üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç—É:", JSON.stringify(loadedOrders, null, 2));
          ws.send(JSON.stringify({ type: "init", orders: loadedOrders }));
        } catch (err) {
          console.error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è orders.json:", err);
          ws.send(JSON.stringify({ type: "error", message: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤" }));
        }
        break;

      case "clear_orders":
        console.log("üóë –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤...");
        orders = [];
        await saveOrdersToFile(orders);
        broadcastToClients({ type: "orders_cleared" });
        break;

      default:
        ws.send(JSON.stringify({ type: "error", message: "Unknown message type" }));
    }
     if (!message || typeof message !== "string" || message.trim() === "") {
      console.warn("‚ö† –ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.");
      return;
    }

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error.message);
  }
}

// üîπ –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
function broadcastToClients(data) {
  wss.clients.forEach((client) => {
    if (client.readyState === WebSocket.OPEN) {
      client.send(JSON.stringify(data));
    }
  });
}

// üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π WebSocket
wss.on("connection", (ws, req) => {
  console.log("üîó –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω!");
  const origin = req.headers.origin || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";
  console.log(`üåê Origin –∫–ª–∏–µ–Ω—Ç–∞: ${origin}`);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã
  console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç—É:", orders);
  ws.send(JSON.stringify({ type: "init", orders }));

  ws.on("message", (message) => processClientMessage(ws, message));
  ws.on("close", () => console.log("‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è."));
  ws.on("error", (error) => console.error("‚ùå –û—à–∏–±–∫–∞ WebSocket:", error));
});

// üîπ –ó–∞–ø—É—Å–∫ HTTPS-—Å–µ—Ä–≤–µ—Ä–∞ (–¥–ª—è HTTP –∏ WebSocket)
server.listen(PORT, () => {
  console.log(`‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ wss://pmk-eagles.shop:${PORT}`);
});
