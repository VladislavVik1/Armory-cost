const fs = require("fs");
const https = require("https");
const express = require("express");
const cors = require("cors");
const { exec } = require("child_process");

const app = express();
const PORT_API = 3000;

// –ü—É—Ç–∏ –∫ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º
const SSL_CERT_PATH = "/etc/letsencrypt/live/pmk-eagles.shop/fullchain.pem";
const SSL_KEY_PATH = "/etc/letsencrypt/live/pmk-eagles.shop/privkey.pem";

// –î–∞–Ω–Ω—ã–µ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
const REMOTE_SERVER = "pmk-eagles.shop";
const REMOTE_USER = "dakraman1232";
const ORDERS_PATH = "/home/dakraman1232/websocket-server_old/orders.json";

// ‚úÖ –í–∫–ª—é—á–∞–µ–º CORS
app.use(cors());
app.use((req, res, next) => {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Methods", "GET, POST, OPTIONS, DELETE");
    res.header("Access-Control-Allow-Headers", "Content-Type, Authorization");

    if (req.method === "OPTIONS") {
        return res.sendStatus(204);
    }
    next();
});

// ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
    console.log(`üì° ${req.method} ‚Üí ${req.url}`);
    next();
});

// ‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ SSH
app.get("/clear-orders-remote", (req, res) => {
    console.log("üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—á–∏—Å—Ç–∫—É –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ SSH...");

    const sshCommand = `ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${REMOTE_USER}@${REMOTE_SERVER} "echo '[]' > ${ORDERS_PATH}"`;

    exec(sshCommand, (error, stdout, stderr) => {
        if (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:", error.message);
            return res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤" });
        }
        console.log(`‚úÖ –ó–∞–∫–∞–∑—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã. –í—ã–≤–æ–¥: ${stdout}`);
        res.json({ success: true, message: "–ó–∞–∫–∞–∑—ã —É–¥–∞–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ" });
    });
});

// ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ Express
app.use((err, req, res, next) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", err.message);
    res.status(500).json({ success: false, message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
});

// ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã (–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö –Ω–∞–ª–∏—á–∏–µ)
let serverOptions;
try {
    if (fs.existsSync(SSL_KEY_PATH) && fs.existsSync(SSL_CERT_PATH)) {
        serverOptions = {
            key: fs.readFileSync(SSL_KEY_PATH),
            cert: fs.readFileSync(SSL_CERT_PATH),
        };
    } else {
        console.error("‚ùå –û—à–∏–±–∫–∞: SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –Ω–∞ HTTP.");
        serverOptions = null;
    }
} catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤:", error.message);
    serverOptions = null;
}

// ‚úÖ –ó–∞–ø—É—Å–∫ HTTPS API —Å–µ—Ä–≤–µ—Ä–∞
if (serverOptions) {
    const httpsServer = https.createServer(serverOptions, app);
    httpsServer.listen(PORT_API, () => {
        console.log(`‚úÖ HTTPS API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ https://${REMOTE_SERVER}:${PORT_API}`);
    });
} else {
    app.listen(PORT_API, () => {
        console.log(`‚úÖ HTTP API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://${REMOTE_SERVER}:${PORT_API}`);
    });
}

// ‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ API
if (fs.existsSync(ORDERS_PATH)) {
    exec(`echo '[]' > ${ORDERS_PATH}`, (error) => {
        if (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ orders.json:", error.message);
        } else {
            console.log("‚úÖ orders.json –æ—á–∏—â–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ API!");
        }
    });
} else {
    console.warn("‚ö† –§–∞–π–ª orders.json –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π.");
    fs.writeFileSync(ORDERS_PATH, "[]");
}
