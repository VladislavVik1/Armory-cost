const fs = require("fs");
const https = require("https");
const express = require("express");
const cors = require("cors");
const { exec } = require("child_process");

const app = express();
const PORT_API = 3000;
const ORDERS_PATH = "/home/dakraman1232/websocket-server_old/orders.json";

// –ü—É—Ç–∏ –∫ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º
const SSL_CERT_PATH = "/etc/letsencrypt/live/pmk-eagles.shop/fullchain.pem";
const SSL_KEY_PATH = "/etc/letsencrypt/live/pmk-eagles.shop/privkey.pem";

// –î–∞–Ω–Ω—ã–µ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
const REMOTE_SERVER = "pmk-eagles.shop";
const REMOTE_USER = "dakraman1232";

// ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CORS
const corsOptions = {
    origin: ["https://vladislavvik1.github.io", "http://127.0.0.1:5500"],
    methods: ["GET", "POST", "OPTIONS", "DELETE"],
    allowedHeaders: ["Content-Type", "Authorization"],
    credentials: true
};
app.use(cors(corsOptions));

// ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
    console.log(`üì° ${req.method} ‚Üí ${req.url}`);
    next();
});

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
function safeJSONParse(data) {
    try {
        if (!data || typeof data !== "string" || data.trim() === "") {
            throw new Error("–î–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ");
        }
        return JSON.parse(data);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", error.message);
        return null;
    }
}

// ‚úÖ API: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
app.get("/get-orders", (req, res) => { // üîπ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –º–∞—Ä—à—Ä—É—Ç (–±—ã–ª–∞ –æ—à–∏–±–∫–∞)
    if (!fs.existsSync(ORDERS_PATH)) {
        console.warn("‚ö† –§–∞–π–ª orders.json –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π.");
        fs.writeFileSync(ORDERS_PATH, "[]", "utf8");
    }

    fs.readFile(ORDERS_PATH, "utf8", (err, data) => {
        if (err) {
            console.error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è orders.json:", err.message);
            return res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤" });
        }

        const orders = safeJSONParse(data);
        if (!orders) {
            return res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤" });
        }

        res.json({ success: true, orders });
    });
});

// ‚úÖ API: –û—á–∏—Å—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ SSH
app.get("/clear-orders-remote", (req, res) => {
    console.log("üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—á–∏—Å—Ç–∫—É –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ SSH...");

    // ‚úÖ –ö–æ–º–∞–Ω–¥–∞ SSH –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤
    const sshCommand = `ssh -T -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${REMOTE_USER}@${REMOTE_SERVER} "echo '[]' | sudo tee ${ORDERS_PATH} > /dev/null"`;

    exec(sshCommand, (error, stdout, stderr) => {
        if (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:", error.message);
            return res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤" });
        }
        console.log(`‚úÖ –ó–∞–∫–∞–∑—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.`);
        res.json({ success: true, message: "–ó–∞–∫–∞–∑—ã —É–¥–∞–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ" });
    });
});

// ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ Express
app.use((err, req, res, next) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", err.message);
    res.status(500).json({ success: false, message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
});

// ‚úÖ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ (HTTPS –∏–ª–∏ HTTP)
if (fs.existsSync(SSL_KEY_PATH) && fs.existsSync(SSL_CERT_PATH)) {
    const serverOptions = {
        key: fs.readFileSync(SSL_KEY_PATH),
        cert: fs.readFileSync(SSL_CERT_PATH),
    };

    const httpsServer = https.createServer(serverOptions, app);
    httpsServer.listen(PORT_API, () => {
        console.log(`‚úÖ HTTPS API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ https://${REMOTE_SERVER}:${PORT_API}`);
    });
} else {
    app.listen(PORT_API, () => {
        console.warn(`‚ö† SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ó–∞–ø—É—Å–∫ –±–µ–∑ HTTPS.`);
        console.log(`‚úÖ HTTP API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://${REMOTE_SERVER}:${PORT_API}`);
    });
}
