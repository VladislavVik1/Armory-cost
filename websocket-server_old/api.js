const fs = require("fs");
const https = require("https");
const express = require("express");
const cors = require("cors");
const { exec } = require("child_process");

const app = express();
const PORT_API = 3000;

// –ü—É—Ç–∏ –∫ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º
const SSL_CERT_PATH = "/etc/letsencrypt/live/pmk-eagles.shop/fullchain.pem";
const SSL_KEY_PATH = "/etc/letsencrypt/live/pmk-eagles.shop/privkey.pem";

// –î–∞–Ω–Ω—ã–µ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
const REMOTE_SERVER = "pmk-eagles.shop";
const REMOTE_USER = "dakraman1232";
const ORDERS_PATH = "/home/dakraman1232/websocket-server_old/orders.json";

// ‚úÖ –í–∫–ª—é—á–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use(cors({
    origin: "*",
    methods: ["GET", "POST", "OPTIONS"],
    allowedHeaders: ["Content-Type", "Authorization"],
    credentials: true
}));

// ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è CORS-–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
app.use((req, res, next) => {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
    res.header("Access-Control-Allow-Headers", "Content-Type, Authorization");
    if (req.method === "OPTIONS") {
        return res.sendStatus(204);
    }
    next();
});

// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH-–¥–æ—Å—Ç—É–ø–∞
function checkSSHConnection(callback) {
    const checkCmd = `ssh -o BatchMode=yes -o ConnectTimeout=5 -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_SERVER} exit`;
    exec(checkCmd, (error) => {
        if (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ SSH-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:", error);
            callback(false);
        } else {
            console.log("‚úÖ SSH-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!");
            callback(true);
        }
    });
}

// ‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç –æ—á–∏—Å—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ SSH
app.get("/clear-orders-remote", (req, res) => {
    checkSSHConnection((isConnected) => {
        if (!isConnected) {
            return res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ SSH-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è" });
        }

        const remoteCommand = `echo '[]' > ${ORDERS_PATH}`;
        const sshCommand = `ssh -o BatchMode=yes -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_SERVER} "${remoteCommand}"`;

        exec(sshCommand, (error, stdout, stderr) => {
            if (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", error);
                console.error("üî∏ stderr:", stderr);
                return res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤" });
            }
            console.log(`‚úÖ –ó–∞–∫–∞–∑—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã. –í—ã–≤–æ–¥: ${stdout}`);
            res.json({ success: true, message: "–ó–∞–∫–∞–∑—ã —É–¥–∞–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ" });
        });
    });
});

// ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ Express
app.use((err, req, res, next) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", err);
    res.status(500).json({ success: false, message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
});

// ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
let serverOptions;
try {
    serverOptions = {
        key: fs.readFileSync(SSL_KEY_PATH),
        cert: fs.readFileSync(SSL_CERT_PATH),
    };
} catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤:", error);
    process.exit(1);
}

// ‚úÖ –ó–∞–ø—É—Å–∫ HTTPS API —Å–µ—Ä–≤–µ—Ä–∞
const httpsServer = https.createServer(serverOptions, app);

httpsServer.listen(PORT_API, () => {
    console.log(`‚úÖ HTTPS API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ https://${REMOTE_SERVER}:${PORT_API}`);
});

// ‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ API
exec(`echo '[]' > ${ORDERS_PATH}`, (error) => {
    if (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ orders.json:", error);
    } else {
        console.log("‚úÖ orders.json –æ—á–∏—â–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ API!");
    }
});
