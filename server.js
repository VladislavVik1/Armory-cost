const fs = require('fs');
const https = require('https');
const WebSocket = require('ws');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = 8080;
const FILE_PATH = "orders.json"; // –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤

// –ó–∞–≥—Ä—É–∂–∞–µ–º SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
const server = https.createServer({
    cert: fs.readFileSync('/etc/letsencrypt/live/pmk-eagles.shop/fullchain.pem'),
    key: fs.readFileSync('/etc/letsencrypt/live/pmk-eagles.shop/privkey.pem')
});

// –°–æ–∑–¥–∞—ë–º WebSocket-—Å–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä—Ö HTTPS
const wss = new WebSocket.Server({ server });

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
let orders = [];
if (fs.existsSync(FILE_PATH)) {
    orders = JSON.parse(fs.readFileSync(FILE_PATH, "utf8"));
}

ws.on("message", (message) => {
      console.log("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:", message);
    try {
        let order = JSON.parse(message);
        
        if (order.type === "new_order") {
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –º–∞—Å—Å–∏–≤
            orders.push(order.order);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            fs.writeFileSync(FILE_PATH, JSON.stringify(orders, null, 2));

            // –†–∞—Å—Å—ã–ª–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
            wss.clients.forEach((client) => {
                if (client.readyState === WebSocket.OPEN) {
                    client.send(JSON.stringify({ type: "new_order", order: order.order }));
                }
            });

            console.log("üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!");
        } 
        
        // ‚ú® –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã "clear_orders"
        else if (order.type === "clear_orders") {
            console.log("üóë –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤!");

            // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ –∑–∞–∫–∞–∑–æ–≤
            
            orders = [];

            // –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª
            console.log("üìÇ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É:", FILE_PATH);
            if (!fs.existsSync(FILE_PATH)) {
             console.error("‚ùå –§–∞–π–ª orders.json –ù–ï –Ω–∞–π–¥–µ–Ω!");
                } else {
                    console.log("‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...");
                 fs.writeFileSync(FILE_PATH, JSON.stringify(orders, null, 2));
                }



            // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, —á—Ç–æ –∑–∞–∫–∞–∑—ã –æ—á–∏—â–µ–Ω—ã
            wss.clients.forEach((client) => {
                if (client.readyState === WebSocket.OPEN) {
                    client.send(JSON.stringify({ type: "orders_cleared" }));
                }
            });

            console.log("‚úÖ –ó–∞–∫–∞–∑—ã –æ—á–∏—â–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.");
        }
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞:", error);
    }
});


// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
server.listen(PORT, () => {
    console.log(`‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ wss://pmk-eagles.shop:${PORT}`);
});