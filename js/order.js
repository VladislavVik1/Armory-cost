document.addEventListener("DOMContentLoaded", function () {
  connectWebSocket();
  loadOrders();

  const clearOrdersButton = document.querySelector(".clear-orders");
  if (clearOrdersButton) {
    clearOrdersButton.addEventListener("click", clearOrders);
  } else {
    console.warn("‚ùó –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤ `.clear-orders` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
  }
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è WebSocket
let socket;

/**
 * –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ localStorage –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —ç–ª–µ–º–µ–Ω—Ç–µ #orders-list
 */
function loadOrders() {
  const orders = JSON.parse(localStorage.getItem("orders")) || [];
  const ordersList = document.getElementById("orders-list");

  if (!ordersList) {
    console.error("‚ùå –û—à–∏–±–∫–∞: —ç–ª–µ–º–µ–Ω—Ç #orders-list –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    return;
  }

  if (orders.length === 0) {
    ordersList.innerHTML = "<p style='color: white;'>–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç...</p>";
    return;
  }

  ordersList.innerHTML = orders
    .map((order, index) => {
      const formattedTotal = parseFloat(order.total || 0).toFixed(2);
      return `
        <div class="order">
          <strong>–ó–∞–∫–∞–∑ ‚Ññ${index + 1}</strong> (${order.date || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞"})<br>
          ${
            Array.isArray(order.items) && order.items.length
              ? order.items
                  .map(
                    (item) => `
              <p>${item.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä"} ‚Äì ${item.quantity || 0} —à—Ç. 
              (${parseFloat(item.totalPrice || 0).toFixed(2)} $)</p>`
                  )
                  .join("")
              : "<p>–¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</p>"
          }
          <p><strong>–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</strong> ${formattedTotal} $</p>
          <p><strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</strong> ${order.comment || "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"}</p>
        </div>
      `;
    })
    .join("");
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å WebSocket-—Å–µ—Ä–≤–µ—Ä–æ–º
 */
function connectWebSocket() {
  socket = new WebSocket("wss://pmk-eagles.shop:8080");

  socket.onopen = () => {
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É");
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É —Å–µ—Ä–≤–µ—Ä–∞ —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã
    socket.send(JSON.stringify({ type: "get_orders" }));
  };

  socket.onmessage = (event) => {
    if (!event.data) {
      console.warn("‚ö† –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.");
      return;
    }

    let data;
    try {
      data = JSON.parse(event.data);
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:",
        error,
        "üì© –î–∞–Ω–Ω—ã–µ:",
        event.data
      );
      return;
    }

    console.log("üì© –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);

    if (!data || typeof data !== "object") {
      console.warn("‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    switch (data.type) {
      case "init":
        if (!Array.isArray(data.orders)) {
          console.error("‚ùå –û—à–∏–±–∫–∞: `orders` –Ω–µ –º–∞—Å—Å–∏–≤!", data.orders);
          return;
        }
        console.log(`üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.orders.length} –∑–∞–∫–∞–∑(–æ–≤) —Å —Å–µ—Ä–≤–µ—Ä–∞.`);
        if (data.orders.length === 0) {
          console.warn("‚ö† –°–µ—Ä–≤–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤.");
        }
        localStorage.setItem("orders", JSON.stringify(data.orders));
        loadOrders();
        break;

      case "orders_cleared":
        console.log("üóë –í—Å–µ –∑–∞–∫–∞–∑—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã —Å–µ—Ä–≤–µ—Ä–æ–º");
        localStorage.removeItem("orders");
        loadOrders();
        break;

      default:
        console.warn("‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);
    }
  };

  socket.onerror = (error) => {
    console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ WebSocket:", error);
  };

  socket.onclose = () => {
    console.warn("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å WebSocket –∑–∞–∫—Ä—ã—Ç–æ. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫...");
    setTimeout(connectWebSocket, 5000);
  };
}

/**
 * –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤ ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å–µ—Ä–≤–µ—Ä—É –∏ –∂–¥—ë—Ç –æ—Ç–≤–µ—Ç–∞,
 * –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫ ‚Äì –æ—á–∏—â–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ.
 */
function clearOrders() {
  if (!socket || socket.readyState !== WebSocket.OPEN) {
    console.warn("‚ö† WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω! –û—á–∏—Å—Ç–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.");
    localStorage.removeItem("orders");
    loadOrders();
    alert("‚úÖ –í—Å–µ –∑–∞–∫–∞–∑—ã —É–¥–∞–ª–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ.");
    return;
  }

  console.log("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ `clear_orders` –Ω–∞ —Å–µ—Ä–≤–µ—Ä...");
  socket.send(JSON.stringify({ type: "clear_orders" }));
  console.log("üì® –ö–æ–º–∞–Ω–¥–∞ `clear_orders` –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...");

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç ‚Äì –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç –∑–∞ 5 —Å–µ–∫—É–Ω–¥, –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
  const clearOrdersTimeout = setTimeout(() => {
    console.warn("‚è≥ –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª, –æ—á–∏—Å—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ.");
    localStorage.removeItem("orders");
    loadOrders();
    socket.removeEventListener("message", handleClearOrdersResponse);
  }, 5000);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –æ—á–∏—Å—Ç–∫–∏
  function handleClearOrdersResponse(event) {
    try {
      const data = JSON.parse(event.data);
      console.log("üì© –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –æ—á–∏—Å—Ç–∫—É –∑–∞–∫–∞–∑–æ–≤:", data);

      if (data.type === "orders_cleared") {
        console.log("üóë –í—Å–µ –∑–∞–∫–∞–∑—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã —Å–µ—Ä–≤–µ—Ä–æ–º");
        clearTimeout(clearOrdersTimeout);
        localStorage.removeItem("orders");
        loadOrders();
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö WebSocket:", error);
    } finally {
      socket.removeEventListener("message", handleClearOrdersResponse);
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
  socket.addEventListener("message", handleClearOrdersResponse);
}
