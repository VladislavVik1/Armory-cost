document.addEventListener("DOMContentLoaded", function () {
    connectWebSocket();
    loadOrders();

    let clearOrdersButton = document.querySelector(".clear-orders");
    if (clearOrdersButton) {
        clearOrdersButton.addEventListener("click", function () {
            if (socket && socket.readyState === WebSocket.OPEN) {
                console.log("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ `clear_orders` –Ω–∞ —Å–µ—Ä–≤–µ—Ä...");
                socket.send(JSON.stringify({ type: "clear_orders" }));

                // –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–µ—Å–ª–∏ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç ‚Äî –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ)
                let clearOrdersTimeout = setTimeout(() => {
                    console.warn("‚è≥ –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª, –æ—á–∏—Å—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ.");
                    localStorage.removeItem("orders");
                    loadOrders();
                }, 5000); // –ñ–¥—ë–º 5 —Å–µ–∫—É–Ω–¥

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
                socket.onmessage = function (event) {
                    try {
                        let data = JSON.parse(event.data);
                        console.log("üì© –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);

                        if (data.type === "orders_cleared") {
                            console.log("üóë –í—Å–µ –∑–∞–∫–∞–∑—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã —Å–µ—Ä–≤–µ—Ä–æ–º");
                            clearTimeout(clearOrdersTimeout);
                            localStorage.removeItem("orders");
                            loadOrders();
                        }
                    } catch (error) {
                        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö WebSocket:", error);
                    }
                };
            } else {
                console.warn("‚ö† WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω! –û—á–∏—Å—Ç–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.");
                localStorage.removeItem("orders");
                loadOrders();
                alert("‚úÖ –í—Å–µ –∑–∞–∫–∞–∑—ã —É–¥–∞–ª–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ.");
            }
        });
    }
});

// **–ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è WebSocket**
let socket;

function connectWebSocket() {
    socket = new WebSocket("wss://pmk-eagles.shop:8080");

    socket.onopen = function () {
        console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É");
        socket.send(JSON.stringify({ type: "get_orders" })); // –ó–∞–ø—Ä–æ—Å –∑–∞–∫–∞–∑–æ–≤ —É —Å–µ—Ä–≤–µ—Ä–∞
    };

    socket.onmessage = function (event) {
        try {
            let data = JSON.parse(event.data);
            console.log("üì© –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞:", data);

            if (data.type === "init") {
                localStorage.setItem("orders", JSON.stringify(data.orders || []));
                loadOrders();
            } else if (data.type === "new_order") {
                let orders = JSON.parse(localStorage.getItem("orders")) || [];
                orders.push(data.order);
                localStorage.setItem("orders", JSON.stringify(orders));
                loadOrders();
            } else if (data.type === "orders_cleared") {
                console.log("üóë –í—Å–µ –∑–∞–∫–∞–∑—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã —Å–µ—Ä–≤–µ—Ä–æ–º");
                localStorage.removeItem("orders");
                loadOrders();
            }
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö WebSocket:", error);
        }
    };

    socket.onerror = function (error) {
        console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ WebSocket:", error);
    };

    socket.onclose = function () {
        console.log("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å WebSocket –∑–∞–∫—Ä—ã—Ç–æ. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...");
        setTimeout(connectWebSocket, 5000);
    };
}

// **–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤**
function loadOrders() {
    let orders = JSON.parse(localStorage.getItem("orders")) || [];
    let ordersList = document.getElementById("orders-list");

    if (!ordersList) {
        console.error("‚ùå –û—à–∏–±–∫–∞: —ç–ª–µ–º–µ–Ω—Ç #orders-list –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        return;
    }

    ordersList.innerHTML = orders.length ? orders.map((order, index) => `
        <div class="order">
            <strong>–ó–∞–∫–∞–∑ ‚Ññ${index + 1}</strong> (${order.date})<br>
            ${order.items.map(item => `<p>${item.name} ‚Äì ${item.quantity} —à—Ç.</p>`).join("")}
            <p><strong>–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</strong> ${order.total} $</p>
        </div>
    `).join("") : "<p style='color: white;'>–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç...</p>";
}
